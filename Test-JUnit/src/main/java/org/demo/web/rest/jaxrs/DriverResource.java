/*
 * Created on 2017-09-29 ( Time 14:21:28 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */
package org.demo.web.rest.jaxrs;

import java.util.LinkedList;
import java.util.List;

//--- Entities
import org.demo.data.record.DriverRecord;
import org.demo.data.record.listitem.DriverListItem;


//--- Services 
import org.demo.persistence.DriverPersistence;
// import org.demo.business.service.impl.DriverServiceImpl;
import org.demo.persistence.commons.PersistenceServiceProvider;
import org.demo.web.rest.commons.AbstractResourceController;



import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

/**
 * JAXRS Jersey controller for 'Driver' management.
 */
@Path("/driver")
public class DriverResource extends AbstractResourceController {

	private DriverPersistence driverService = PersistenceServiceProvider.getService(DriverPersistence.class);

	/**
	 * Constructor
	 */
	public DriverResource() {
		super();
		logger.info("Constructor.");
	}

	/**
	 * Get all driver entities.
	 * @return list with all entities found
	 */
	@GET
	@Produces({MediaType.APPLICATION_JSON})
	public List<DriverRecord> findAll() {
		logger.info("findAll()...");
		return driverService.findAll();
	}

	/**
	 * Retrieves a driver using the given id.
	 * @param id id
	 * @return 200 + body if found, 404 if not found 
	 */
	@GET
	@Path("{id}")
	@Produces({MediaType.APPLICATION_JSON})
	public Response findById(@PathParam("id") int id) {
		logger.info("findById("+id+")...");
		DriverRecord record = driverService.findById(id);
		if ( record != null ) {
			return Response.ok(record).build();
		}
		else {
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Creates a new driver.
	 * @param driver driver
	 * @return 201 with body if created, 409 conflict if duplicate key 
	 */	
	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response create(DriverRecord driver) {
		logger.info("create()...");
		if ( driverService.exists(driver) ) {
			logger.info("create() : already exists -> conflict");
			return Response.status(Status.CONFLICT).build();
		}
		else {
			logger.info("create() : doesn't exist -> create");
			DriverRecord record = driverService.create(driver);
			return Response.status(Status.CREATED).entity(record).build();
		}
	}

//------------------------------------------------------------
	/**
	 * Updates the driver identified by the given id
	 * @param driver driver entity
	 * @param id id 
	 * @return 200 if found and updated, 404 if not found 
	 */	
	@PUT
	@Path("{id}")
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	// public DriverRecord update(DriverRecord driver, @PathParam("id") int id) {
	public Response update(DriverRecord driver, @PathParam("id") int id) {
		logger.info("update()...");
		// force the id (use the id provided by the URL)
		driver.setId( id );
		boolean updated = driverService.update(driver);
		if ( updated ) {
			// Actually updated (found and updated) => 200 OK
			return Response.status(Status.OK).build();
		}
		else {
			// Not updated with no error => 404 not found
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Save (create or update) the given driver.
	 * @param driver driver entity
	 * @return 200 if found and updated, 201 if not found and created
	 */	
	@PUT
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response save(DriverRecord driver) {
		logger.info("save()...");
		Status status = Status.OK ; // 200 OK
		if ( ! driverService.exists(driver) ) {
			status = Status.CREATED ; // 201 CREATED
		}
		DriverRecord record = driverService.save(driver);
		// Response ( code 200 or 201 )
		return Response.status(status).entity(record).build();
	}


//------------------------------------------------------------
	/**
	 * Delete a driver.
	 * @param id id
	 */
	@DELETE
	@Path("{id}")
	//@Consumes({MediaType.APPLICATION_JSON})
	// public void delete(@PathParam("id") int id) {
	public Response delete(@PathParam("id") int id) {
		logger.info("delete("+id+")...");
		// driverService.deleteById(id);
		boolean deleted = driverService.deleteById(id);
		if ( deleted ) {
			// Actually deleted (found and deleted) => 204 "No Content" because no body in the response 
			return Response.status(Status.NO_CONTENT).build();
		}
		else {
			// Not deleted with no error => 404 "Not found"
			return Response.status(Status.NOT_FOUND).build();
		}
}

	@GET
	@Path("/drivers-list-items")
	@Produces({MediaType.APPLICATION_JSON})
	public List<DriverListItem> listItems() {
		logger.info("listItems()...");
		List<DriverRecord> list = driverService.findAll();
		List<DriverListItem> items = new LinkedList<DriverListItem>();
		for ( DriverRecord driver : list ) {
			items.add(new DriverListItem( driver ) );
		}
		return items;
	}

}
